{
  "comments": [
    {
      "key": {
        "uuid": "cd3efb10_3161e472",
        "filename": "kernel/sched/core.c",
        "patchSetId": 1
      },
      "lineNbr": 2867,
      "author": {
        "id": 1122323
      },
      "writtenOn": "2017-02-23T20:47:20Z",
      "side": 1,
      "message": "I wonder if here we should have \ncpu_utilization \u003d add_capacity_margin(cpu_utilization);\n\nThe boosted_cpu_util fn doesn\u0027t include any headroom in case no boost is in place (although one might consider the boost to be headroom) and this might lead to more frequency changes than necessary.",
      "revId": "3536acecd79f8f1e7fc0ba565a3310afc742031b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "822a81ba_40d7a28c",
        "filename": "kernel/sched/core.c",
        "patchSetId": 1
      },
      "lineNbr": 2867,
      "author": {
        "id": 1118133
      },
      "writtenOn": "2017-02-23T20:49:05Z",
      "side": 1,
      "message": "the margin is added in sum_capacity_reqs() above",
      "parentUuid": "cd3efb10_3161e472",
      "revId": "3536acecd79f8f1e7fc0ba565a3310afc742031b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03d38a15_2e809149",
        "filename": "kernel/sched/core.c",
        "patchSetId": 1
      },
      "lineNbr": 2867,
      "author": {
        "id": 1122323
      },
      "writtenOn": "2017-02-24T17:10:27Z",
      "side": 1,
      "message": "Just to make this clear to any other readers. The margin added in sum_capacity_reqs matches the logic of OPP selection to decide if we will change the capacity. What was slightly confusing is that we behave differently for PELT and WALT.\n\nThis is what happens for PELT (ignore the early exit for now)\n\nin sched_freq_tick_pelt:\n  cpu_util \u003d boosted_cpu_util\n  call set_cfs_cpu_capacity with boosted_cpu_util only.\n  in set_cfs_cpu_capacity:\n    set scr-\u003ecfs to boosted_cpu_util\n    call update_cpu_capacity\n      in update_cpu_capacity:\n        required_cap \u003d ((cpu_util_boosted + rt)*margin + dl)\n\n\nso, the margin is applied immediately before OPP selection.\n\nFor WALT the sequence is slightly different. WALT counts all utilization rather than tracking class util separately.\n\nin sched_freq_tick_walt:\n  cpu_util \u003d utilization_of_all_classes\n  add the margin to cpu util\n  call set_cfs_cpu_capacity with cpu_util*margin\n  in set_cfs_cpu_capacity:\n    set scr-\u003ecfs to cpu_util*margin\n    call update_cpu_capacity\n    in update_cpu_capacity:\n      required_cap \u003d ((cpu_util*margin)*margin)\n\n\nYou can see that the WALT tick-time OPP selection has a double margin applied, to all classes. (PELT only applies margin to DL but since we don\u0027t track separately for WALT there is little alternative.\n\nNote that WALT was never using the boosted_cpu_util for OPP biasing, but we likely didn\u0027t notice because of the double boost. Using boosted cpu util should be the right thing to do according to the design of schedtune.\n\nAlso note that we never downsize capacity at sched tick, for either pelt or\nwalt although we do whenever a task is moved between cgroups or migrated or sleeps/wakes up.",
      "parentUuid": "822a81ba_40d7a28c",
      "revId": "3536acecd79f8f1e7fc0ba565a3310afc742031b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}